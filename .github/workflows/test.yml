name: tests

on: push

env:
#  # Python and Poetry versions should be added as the are released
#  # If you're reading this after a new release has been made to either,
#  # please feel free to submit a PR.
#  SUPPORTED_POETRY: '{\"poetry-version\":[\"1.1.2\", \"1.1.4\"]}'
#  SUPPORTED_PYTHON: '{\"python-version\":[\"3.7\", \"3.8\", \"3.9\"]}'
#
#  # This cat expression should represent the latest version of Pqoetry
#  # Dependabot is set up to commit PRs when a new version is released
#  LATEST_POETRY: "$(cat requirements.txt | sed 's/poetry==//g')"
#  LATEST_PYTHON: "3.9"
#
#  SUPPORTED_OS: ""
  one: 1
  SUPPORTED_POETRY: '{\"poetry-version\":[\"1.1.2\", \"1.1.4\"]}'

jobs:
  set-matrix-values:
    runs-on: ubuntu-latest
    outputs:
      poetry-versions: ${{ steps.set-matrix.outputs.poetry-versions }}
      python-versions: ${{ steps.set-matrix.outputs.python-versions }}
    steps:
    - id: set-matrix
      run: |
        echo "::set-output name=poetry-versions::{\"poetry-versions\":[\"1.1.2\", \"1.1.4\"]}"
        echo "::set-output name=python-versions::{\"python-versions\":[\"3.7\", \"3.8\", \"3.9\"]}"
  job2:
    needs: set-matrix-values
    runs-on: ubuntu-latest
    strategy:
      matrix: |
        ${{fromJson(needs.set-matrix-values.outputs.poetry-versions)}}
        ${{fromJson(needs.set-matrix-values.outputs.python-versions)}}
    steps:
    - run: echo ${{ matrix.poetry-versions }}
#
#jobs:
#  set-matrix-values:
#    runs-on: ubuntu-latest
#    outputs:
#      poetry-versions: ${{ steps.set-matrix.outputs.poetry-versions }}
##      python-versions: ${{ steps.set-matrix.outputs.python-versions }}
##      latest-poetry: ${{ steps.set-matrix.outputs.latest-poetry }}
##      latest-python: ${{ steps.set-matrix.outputs.latest-python }}
##      supported-os: ${{ steps.set-matrix.outputs.supported-os }}
#    steps:
#    - id: set-matrix
#      run: |
#        echo "::set-output name=poetry-versions::{\"poetry-versions\":${{ env.SUPPORTED_POETRY }} }"
##        echo "::set-output name=python-versions::{\"include\":[{\"project\":\"foo\",\"config\":\"Debug\"},{\"project\":\"bar\",\"config\":\"Release\"}]}"
##        echo "::set-output name=latest-poetry::{\"include\":[{\"project\":\"foo\",\"config\":\"Debug\"},{\"project\":\"bar\",\"config\":\"Release\"}]}"
##        echo "::set-output name=latest-python::{\"include\":[{\"project\":\"foo\",\"config\":\"Debug\"},{\"project\":\"bar\",\"config\":\"Release\"}]}"
##        echo "::set-output name=supported-os::{\"include\":[{\"project\":\"foo\",\"config\":\"Debug\"},{\"project\":\"bar\",\"config\":\"Release\"}]}"
#  first-job:
#    needs: set-matrix-values
#    runs-on: ubuntu-latest
#    strategy:
#      matrix: ${{ fromJson(needs.set-matrix-values.outputs.poetry-versions) }}
#    steps:
#    - run: |
#        echo "${{ env.one }}"
#        echo "${{ needs.set-matrix-values.outputs.poetry-versions }}"
#        echo "${{ matrix.poetry-version }}"
#jobs:
#  test-environment-variables:
#    runs-on: ubuntu-latest
#    strategy:
#      matrix: ${{fromJson(SUPPORTED_PYTHON)}}
#    steps:
#      - run: echo "${{ matrix.python-version }}"
#  # This test makes sure the default settings run on
#  # all supported combinations of Python, Poetry, and operating systems
#  test-all-os-python-and-poetry-versions:
#    strategy:
#      fail-fast: true
#      matrix:
#        os: [ubuntu-latest, macos-latest, windows-latest]
#        python-version: ${{ env.SUPPORTED_PYTHON }}
#
#        poetry-version: [1.1.2, 1.1.4]
#    runs-on: ${{ matrix.os }}
#    defaults:
#      run:
#        shell: bash
#    steps:
#      - uses: actions/checkout@v2
#      - name: Setup Poetry
#        uses: ./
#        with:
#          version: ${{ matrix.poetry-version }}
#      - name: Setup Python
#        uses: actions/setup-python@v2
#        with:
#          python-version: ${{ matrix.python-version }}
#      - run: poetry install
#      - run: poetry run pytest --version
#
#  # This test covers the case of skipping venv creation
#  test-create-venv-false:
#    strategy:
#      fail-fast: true
#      matrix:
#        os: [ubuntu-latest, macos-latest, windows-latest]
#    runs-on: ${{ matrix.os }}
#    defaults:
#      run:
#        shell: bash
#    steps:
#      - uses: actions/checkout@v2
#      - name: Setup Poetry
#        uses: ./
#        with:

#          version: ${{ env.LATEST_POETRY }}
#          virtualenvs-create: false
#      - uses: actions/setup-python@v2
#        with:
#          python-version: 3.9
#      - name: Test no venv is created
#        run: |
#          output=$(poetry install)
#          echo $output
#          source "./assert.sh"
#          assert_in "Skipping virtualenv creation, as specified in config file." "$output"
#  test-create-venv-in-project:
#    strategy:
#      fail-fast: true
#      matrix:
#        os: [ubuntu-latest, macos-latest, windows-latest]
#    runs-on: ${{ matrix.os }}
#    defaults:
#      run:
#        shell: bash
#    steps:
#      - uses: actions/checkout@v2
#      - name: Setup Poetry
#        uses: ./
#        with:
#          virtualenvs-create: true
#          virtualenvs-in-project: true
#      - uses: actions/setup-python@v2
#        with:
#          python-version: 3.9
#      - name: Test venv in project
#        run: |
#          output="$(poetry install)"
#          source "./assert.sh"
#          assert_in "/install-poetry/install-poetry/.venv" "$output"
#          source $VENV
#          pytest --version
#  test-create-venv-outside-project:
#    strategy:
#      fail-fast: true
#      matrix:
#        os: [ubuntu-latest, macos-latest, windows-latest]
#    runs-on: ${{ matrix.os }}
#    defaults:
#      run:
#        shell: bash
#    steps:
#      - uses: actions/checkout@v2
#      - name: Setup Poetry
#        uses: ./
#        with:
#          version: 1.1.4
#          virtualenvs-create: true
#          virtualenvs-in-project: false
#      - uses: actions/setup-python@v2
#        with:
#          python-version: 3.9
#      - name: Test venv outside project
#        run: |
#          output=$(poetry install)
#          echo $output
#          source "./assert.sh"
#          assert_in_one "/home/runner/.cache/pypoetry/virtualenvs" "/Users/runner/Library/Caches/pypoetry/virtualenvs" "C:\Users\runneradmin\AppData\Local\pypoetry\Cache\virtualenvs" "$output"
#          poetry run pytest --version
#  test-caching:
#    runs-on: ubuntu-latest
#    steps:
#      - uses: actions/checkout@v2
#      - uses: actions/setup-python@v2
#      - name: Install poetry
#        uses: ./
#        with:
#          virtualenvs-create: true
#          virtualenvs-in-project: true
#      - uses: actions/cache@v2
#        id: cached-poetry-dependencies
#        with:
#          path: .venv
#          key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}-1
#      - run: poetry install
#        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
#      - run: |
#          source $VENV
#          pytest --version
#  test-venv-env-var:
#    strategy:
#      fail-fast: false
#      matrix:
#        os: [ubuntu-latest, macos-latest, windows-latest]
#    runs-on: ${{ matrix.os }}
#    defaults:
#      run:
#        shell: bash
#    steps:
#      - uses: actions/checkout@v2
#      - name: Setup Poetry
#        uses: ./
#        with:
#          virtualenvs-create: true
#          virtualenvs-in-project: true
#      - name: Setup Python
#        uses: actions/setup-python@v2
#        with:
#          python-version: 3.9
#      - run: poetry install
#      - run: |
#          source $VENV
#          pytest --version
