name: tests

on: pull_request

# The env section of the file contains all the versions of
# Poetry, Python, and OS versions we "support"
# If you find anything needing to be updated, please feel free to submit a PR.

env:
  # JSON variables (used in our strategy/matrix)
  SUPPORTED_POETRY_VERSIONS: '\"poetry-version\":[\"1.1.0\", \"1.1.8\", \"1.2.0a2\"]'
  SUPPORTED_PYTHON_VERSIONS: '\"python-version\":[\"3.7\", \"3.9\", \"3.10.0-beta.4\"]'
  SUPPORTED_OPERATING_SYSTEMS: '\"os\":[\"ubuntu-latest\", \"macos-latest\", \"windows-latest\"]'

  # Normal variables (used in steps/*)
  LATEST_PYTHON: "3.9"
  LATEST_POETRY: "1.1.8"

jobs:
  # The set-env job translates our json variables to a format we
  # can use in our workflow specifications. Without this step,
  # we're not able to use the json values in our matrices.
  # If you know of a better way of doing this, please submit a PR :)
  set-env:
    runs-on: ubuntu-latest
    outputs:
      full-matrix: ${{ steps.set-matrix-vars.outputs.full-matrix }}
      # ^ this represents:
      # matrix:
      #   - os: [ubuntu-latest, ...]
      #   - python-version: [3.7, ...]
      #   - poetry-version: [1.1.2, ...]
      py-os-matrix: ${{ steps.set-matrix-vars.outputs.py-os-matrix }}
      # ^ this represents:
      # matrix:
      #   - os: [ubuntu-latest, ...]
      #   - python-version: [3.7, ...]
      os-matrix: ${{ steps.set-matrix-vars.outputs.os-matrix }}
      # ^ this represents:
      # matrix:
      #   - os: [ubuntu-latest, ...]
    steps:
      - id: set-matrix-vars
        run: |
          echo "::set-output name=full-matrix::{${{ env.SUPPORTED_POETRY_VERSIONS }},${{ env.SUPPORTED_PYTHON_VERSIONS }},${{ env.SUPPORTED_OPERATING_SYSTEMS }}}"
          echo "::set-output name=py-os-matrix::{${{ env.SUPPORTED_PYTHON_VERSIONS }},${{ env.SUPPORTED_OPERATING_SYSTEMS }}}"
          echo "::set-output name=os-matrix::{${{ env.SUPPORTED_OPERATING_SYSTEMS }}}"

  # This job makes sure that the install-poetry action works,
  # using the default settings, on all combinations of Python versions,
  # Poetry versions, and operating systems that we want to test
  test-install:
    name: basic install - ${{ matrix.poetry-version }} - ${{ matrix.os }} - ${{ matrix.python-version }}-
    needs: set-env
    strategy:
      fail-fast: true
      matrix: ${{fromJson(needs.set-env.outputs.full-matrix)}}
    defaults:
      run:
        shell: bash
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2
      - uses: ./
        with:
          version: ${{ matrix.poetry-version }}
      - uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - run: poetry install --no-root --no-interaction
      - run: poetry install --no-interaction
      - run: poetry run pytest --version

  test-create-venv-false:
    name: Skip venv creation - ${{ matrix.os }}
    needs: set-env
    strategy:
      fail-fast: true
      matrix: ${{fromJson(needs.set-env.outputs.os-matrix)}}
    defaults:
      run:
        shell: bash
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2
      - uses: ./
        with:
          version: ${{ env.LATEST_POETRY }}
          virtualenvs-create: false
      - uses: actions/setup-python@v2
        with:
          python-version: ${{ env.LATEST_PYTHON }}
      - name: Test no venv is created
        run: |
          output=$(poetry config virtualenvs.create)
          echo $output
          source "./.github/scripts/assert.sh"
          assert_in "false" "$output"

  # Makes sure creating a venv in-project works
  # Makes sure all operating system combinations can activate venvs
  # using the custom install-poetry $VENV environment variable
  test-venv-env-var:
    needs: set-env
    strategy:
      fail-fast: true
      matrix: ${{ fromJson(needs.set-env.outputs.os-matrix) }}
    defaults:
      run:
        shell: bash
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2
      - name: Setup Poetry
        uses: ./
        with:
          virtualenvs-in-project: true
      - uses: actions/setup-python@v2
        with:
          python-version: ${{ env.LATEST_PYTHON }}
      - run: |
          output="$(poetry install)"
          source "./.github/scripts/assert.sh"
          echo "$output"
          assert_in "/install-poetry/install-poetry/.venv" "$output"
          source $VENV
          pytest --version


  # Make sure the default version corresponds to 'latest'
  test-latest-version-when-unspecified:
    needs: set-env
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Setup Poetry
        uses: ./
      # This test will need to change every time poetry releases a new version
      # If you're submitting a PR and this fails because Poetry release a new version
      # feel free to update it
      - run: |
          source "./.github/scripts/assert.sh"
          assert_in "1.1.8" "$(poetry --version)"

  # Make sure scripts are not deleted.
  # If we deleted the scripts folder (or subfolders) by accident,
  # different versions of the action would fail
  test-scripts-exist:
    runs-on: ubuntu-latest
    steps:
      # v1.1 script loaded in < 1.1.4
      - uses: snok/install-poetry@v1.1.4
      # v1.2 script loaded in > 1.1.4
      - uses: snok/install-poetry@v1.1.6

  # Make sure we're able to run the action with major and
  # minor version, not just with complete versions.
  test-major-and-minor-versions:
    runs-on: ubuntu-latest
    steps:
      - uses: snok/install-poetry@v1
      - uses: snok/install-poetry@v1.1

  # Makes sure disabling parallel installs works
  test-installer-parallel-false:
    needs: set-env
    strategy:
      fail-fast: true
      matrix: ${{fromJson(needs.set-env.outputs.os-matrix)}}
    defaults:
      run:
        shell: bash
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2
      - uses: ./
        with:
          version: ${{ env.LATEST_POETRY }}
          installer-parallel: false
      - uses: actions/setup-python@v2
        with:
          python-version: ${{ env.LATEST_PYTHON }}
      - name: Test parallel option is disabled
        run: |
          output=$(poetry config installer.parallel)
          echo $output
          source "./.github/scripts/assert.sh"
          assert_in "false" "$output"
