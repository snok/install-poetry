name: tests

on: push

# The env section contains all our supported Poetry, Python, and OS versions
# --------------------------------------------------------------------------
# If you're reading this after a new version has been released, please feel
# free to submit a PR. The same applies to outdated actions used in our tests.
# --------------------------------------------------------------------------
# Note: the env + set-matrix-values job is terribly complicated for the
# function it serves; if you have a suggestion for a way to make this section
# simpler - a solution is also welcome!
# --------------------------------------------------------------------------

env:
  SUPPORTED_POETRY: '\"poetry-version\":[\"1.1.2\", \"1.1.4\"]'
  SUPPORTED_PYTHON: '\"python-version\":[\"3.7\", \"3.8\", \"3.9\"]'
  SUPPORTED_OS: '\"os\":[\"ubuntu-latest\", \"macos-latest\", \"windows-latest\"]'
  LATEST_PYTHON: "3.9"
  # Expression represents the latest Poetry version
  # Dependabot is set up to commit PRs when a new version is released
  LATEST_POETRY: "$(cat requirements.txt | sed 's/poetry==//g')"

jobs:
  # Job imports our workflow level environment variables to a format we can
  # apply to our strategy.matrix setting
  set-env:
    runs-on: ubuntu-latest
    outputs:
      full-matrix: ${{ steps.set-matrix.outputs.full-matrix }}
      # ^ this matrix represents:
      # matrix:
      #   - os: [ubuntu-latest, ...]
      #   - python-version: [3.7, ...]
      #   - poetry-version: [1.1.2, ...]
      py-os-matrix: ${{ steps.set-matrix.outputs.py-os-matrix }}
      # ^ this matrix represents:
      # matrix:
      #   - os: [ubuntu-latest, ...]
      #   - python-version: [3.7, ...]
      os-matrix: ${{ steps.set-matrix.outputs.os-matrix }}
      # ^ this matrix represents:
      # matrix:
      #   - os: [ubuntu-latest, ...]
    steps:
    - id: set-matrix
      run: |
        echo "::set-output name=full-matrix::{${{ env.SUPPORTED_POETRY }}, ${{ env.SUPPORTED_PYTHON }}, ${{ env.SUPPORTED_OS }}}"
        echo "::set-output name=py-os-matrix::{${{ env.SUPPORTED_PYTHON }}, ${{ env.SUPPORTED_OS }}}"
        echo "::set-output name=os-matrix::{${{ env.SUPPORTED_OS }}}"
  # Test makes sure the default action settings run on all combinations of
  # supported Python versions, Poetry versions, and operating systems
#  test-all-os-python-and-poetry-versions:
#    needs: set-env
#    strategy:
#      fail-fast: true
#      matrix: ${{fromJson(needs.set-env.outputs.full-matrix)}}
#    defaults:
#      run:
#        shell: bash
#    runs-on: ${{ matrix.os }}
#    steps:
#      - uses: actions/checkout@v2
#      - uses: ./
#        with:
#          version: ${{ matrix.poetry-version }}
#      - uses: actions/setup-python@v2
#        with:
#          python-version: ${{ matrix.python-version }}
#      - run: poetry install
#      - run: poetry run pytest --version

  # Test makes sure no venv creation works
#  test-create-venv-false:
#    needs: set-env
#    strategy:
#      fail-fast: true
#      matrix: ${{fromJson(needs.set-env.outputs.os-matrix)}}
#    defaults:
#      run:
#        shell: bash
#    runs-on: ${{ matrix.os }}
#    steps:
#      - uses: actions/checkout@v2
#      - uses: ./
#        with:
#          version: ${{ env.LATEST_POETRY }}
#          virtualenvs-create: false
#      - uses: actions/setup-python@v2
#        with:
#          python-version: ${{ env.LATEST_PYTHON }}
#      - name: Test no venv is created
#        run: |
#          output=$(poetry install)
#          echo $output
#          source "./assert.sh"
#          assert_in "Skipping virtualenv creation, as specified in config file." "$output"

  # Test makes sure venv creation in-project works
  test-create-venv-in-project:
    needs: set-env
    strategy:
      fail-fast: true
      matrix: ${{fromJson(needs.set-env.outputs.os-matrix)}}
    defaults:
      run:
        shell: bash
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2
      - uses: ./
        with:
          version: ${{ env.LATEST_POETRY }}
          virtualenvs-create: true
          virtualenvs-in-project: true
      - uses: actions/setup-python@v2
        with:
          python-version: ${{ env.LATEST_PYTHON }}
      - name: Test venv in project
        run: |
          output="$(poetry install)"
          source "./assert.sh"
          assert_in "/install-poetry/install-poetry/.venv" "$output"
          source $VENV
          pytest --version
#  test-create-venv-outside-project:
#    strategy:
#      fail-fast: true
#      matrix:
#        os: [ubuntu-latest, macos-latest, windows-latest]
#    runs-on: ${{ matrix.os }}
#    defaults:
#      run:
#        shell: bash
#    steps:
#      - uses: actions/checkout@v2
#      - name: Setup Poetry
#        uses: ./
#        with:
#          version: ${{ needs.set-matrix-values.outputs.latest-poetry }}
#          virtualenvs-create: true
#          virtualenvs-in-project: false
#      - uses: actions/setup-python@v2
#        with:
#          python-version: ${{ needs.set-matrix-values.outputs.latest-python }}
#      - name: Test venv outside project
#        run: |
#          output=$(poetry install)
#          echo $output
#          source "./assert.sh"
#          assert_in_one "/home/runner/.cache/pypoetry/virtualenvs" "/Users/runner/Library/Caches/pypoetry/virtualenvs" "C:\Users\runneradmin\AppData\Local\pypoetry\Cache\virtualenvs" "$output"
#          poetry run pytest --version
#  test-caching:
#    runs-on: ubuntu-latest
#    steps:
#      - uses: actions/checkout@v2
#      - uses: actions/setup-python@v2
#      - name: Install poetry
#        uses: ./
#        with:
#          virtualenvs-create: true
#          virtualenvs-in-project: true
#      - uses: actions/cache@v2
#        id: cached-poetry-dependencies
#        with:
#          path: .venv
#          key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}-1
#      - run: poetry install
#        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
#      - run: |
#          source $VENV
#          pytest --version
#  test-venv-env-var:
#    strategy:
#      fail-fast: false
#      matrix:
#        os: [ubuntu-latest, macos-latest, windows-latest]
#    runs-on: ${{ matrix.os }}
#    defaults:
#      run:
#        shell: bash
#    steps:
#      - uses: actions/checkout@v2
#      - name: Setup Poetry
#        uses: ./
#        with:
#          virtualenvs-create: true
#          virtualenvs-in-project: true
#      - name: Setup Python
#        uses: actions/setup-python@v2
#        with:
#          python-version: ${{ needs.set-matrix-values.outputs.latest-python }}
#      - run: poetry install
#      - run: |
#          source $VENV
#          pytest --version
