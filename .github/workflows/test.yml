name: tests

on: push


env:
  # Python and Poetry versions should be added as the are released
  # If you're reading this after a new release has been made to either,
  # please feel free to submit a PR.
  SUPPORTED_POETRY: [1.1.2, 1.1.4]
  SUPPORTED_PYTHON: [3.7, 3.8, 3.9]
  LATEST_POETRY: $(cat requirements.txt | sed 's/poetry==//g')
  LATEST_PYTHON: 3.9
jobs:
  test-environment-variables:
    runs-on: ubuntu-latest
    steps:
      - run: echo "${{ env.SUPPORTED_PYTHON }}"
#  # This test makes sure the default settings run on
#  # all supported combinations of Python, Poetry, and operating systems
#  test-all-os-python-and-poetry-versions:
#    strategy:
#      fail-fast: true
#      matrix:
#        os: [ubuntu-latest, macos-latest, windows-latest]
#        python-version: ${{ env.SUPPORTED_PYTHON }}
#
#        poetry-version: [1.1.2, 1.1.4]
#    runs-on: ${{ matrix.os }}
#    defaults:
#      run:
#        shell: bash
#    steps:
#      - uses: actions/checkout@v2
#      - name: Setup Poetry
#        uses: ./
#        with:
#          version: ${{ matrix.poetry-version }}
#      - name: Setup Python
#        uses: actions/setup-python@v2
#        with:
#          python-version: ${{ matrix.python-version }}
#      - run: poetry install
#      - run: poetry run pytest --version
#
#  # This test covers the case of skipping venv creation
#  test-create-venv-false:
#    strategy:
#      fail-fast: true
#      matrix:
#        os: [ubuntu-latest, macos-latest, windows-latest]
#    runs-on: ${{ matrix.os }}
#    defaults:
#      run:
#        shell: bash
#    steps:
#      - uses: actions/checkout@v2
#      - name: Setup Poetry
#        uses: ./
#        with:
#          # This cat expression should represent the latest version of Poetry
#          # Dependabot is set up to commit PRs when a new version is released
#          version: ${{ env.LATEST_POETRY }}
#          virtualenvs-create: false
#      - uses: actions/setup-python@v2
#        with:
#          python-version: 3.9
#      - name: Test no venv is created
#        run: |
#          output=$(poetry install)
#          echo $output
#          source "./assert.sh"
#          assert_in "Skipping virtualenv creation, as specified in config file." "$output"
#  test-create-venv-in-project:
#    strategy:
#      fail-fast: true
#      matrix:
#        os: [ubuntu-latest, macos-latest, windows-latest]
#    runs-on: ${{ matrix.os }}
#    defaults:
#      run:
#        shell: bash
#    steps:
#      - uses: actions/checkout@v2
#      - name: Setup Poetry
#        uses: ./
#        with:
#          virtualenvs-create: true
#          virtualenvs-in-project: true
#      - uses: actions/setup-python@v2
#        with:
#          python-version: 3.9
#      - name: Test venv in project
#        run: |
#          output="$(poetry install)"
#          source "./assert.sh"
#          assert_in "/install-poetry/install-poetry/.venv" "$output"
#          source $VENV
#          pytest --version
#  test-create-venv-outside-project:
#    strategy:
#      fail-fast: true
#      matrix:
#        os: [ubuntu-latest, macos-latest, windows-latest]
#    runs-on: ${{ matrix.os }}
#    defaults:
#      run:
#        shell: bash
#    steps:
#      - uses: actions/checkout@v2
#      - name: Setup Poetry
#        uses: ./
#        with:
#          version: 1.1.4
#          virtualenvs-create: true
#          virtualenvs-in-project: false
#      - uses: actions/setup-python@v2
#        with:
#          python-version: 3.9
#      - name: Test venv outside project
#        run: |
#          output=$(poetry install)
#          echo $output
#          source "./assert.sh"
#          assert_in_one "/home/runner/.cache/pypoetry/virtualenvs" "/Users/runner/Library/Caches/pypoetry/virtualenvs" "C:\Users\runneradmin\AppData\Local\pypoetry\Cache\virtualenvs" "$output"
#          poetry run pytest --version
#  test-caching:
#    runs-on: ubuntu-latest
#    steps:
#      - uses: actions/checkout@v2
#      - uses: actions/setup-python@v2
#      - name: Install poetry
#        uses: ./
#        with:
#          virtualenvs-create: true
#          virtualenvs-in-project: true
#      - uses: actions/cache@v2
#        id: cached-poetry-dependencies
#        with:
#          path: .venv
#          key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}-1
#      - run: poetry install
#        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
#      - run: |
#          source $VENV
#          pytest --version
#  test-venv-env-var:
#    strategy:
#      fail-fast: false
#      matrix:
#        os: [ubuntu-latest, macos-latest, windows-latest]
#    runs-on: ${{ matrix.os }}
#    defaults:
#      run:
#        shell: bash
#    steps:
#      - uses: actions/checkout@v2
#      - name: Setup Poetry
#        uses: ./
#        with:
#          virtualenvs-create: true
#          virtualenvs-in-project: true
#      - name: Setup Python
#        uses: actions/setup-python@v2
#        with:
#          python-version: 3.9
#      - run: poetry install
#      - run: |
#          source $VENV
#          pytest --version
